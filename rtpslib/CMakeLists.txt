IF (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
	MESSAGE(FATAL_ERROR "CMake generation must always be out-of-source!
    Remove the CMakeCache.txt file and try again from another folder")
ENDIF (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

project(rtpslib C CXX)

#change this later
SET( CMAKE_MODULE_PATH ${RTPS_CMAKE_MODULE_PATH})
message("cmake_module_path: ${CMAKE_MODULE_PATH}\n")

#this mostly affects the path to cl files
SET(RTPS_DEBUG TRUE)

#only works on mac/linux
SET(PREPROCESS_CL TRUE)

SET(WITH_OPENCL TRUE)

ADD_DEFINITIONS(-g )
ADD_DEFINITIONS(-DGPU)

##### Source Paths ############################################################
ADD_DEFINITIONS(-DSPH_CL_SOURCE_DIR="cl_sph")
ADD_DEFINITIONS(-DCOMMON_CL_SOURCE_DIR="cl_common")
ADD_DEFINITIONS(-DGLSL_BIN_DIR="shaders")
ADD_DEFINITIONS(-DGLSL_SOURCE_DIR="render")
##############################################################################


FIND_PACKAGE (OpenGL)
FIND_PACKAGE (OPENCL)
FIND_PACKAGE (GLEW)

message("OPENCL INCLUDE: ${OPENCL_INCLUDE_DIR}\n")

set (rtpslib_INCLUDES
    #${GLUT_INCLUDE_DIR}
    ${OPENGL_INCLUDE_DIR}
    ${GLEW_INCLUDE_PATH}
    #${BASE_DIR}/opencl10
    ${OPENCL_INCLUDE_DIR}
    ${rtpslib_SOURCE_DIR}
    ${rtpslib_SOURCE_DIR}/system
    ${rtpslib_SOURCE_DIR}/system/sph
    #${rtpslib_SOURCE_DIR}/system/flock
    #${rtpslib_SOURCE_DIR}/system/outer
    ${rtpslib_SOURCE_DIR}/system/common
    ${rtpslib_SOURCE_DIR}/render
    ${rtpslib_SOURCE_DIR}/render/util
    ${rtpslib_SOURCE_DIR}/domain
    ${rtpslib_SOURCE_DIR}/opencl
    ${rtpslib_SOURCE_DIR}/matrix_library
    #${rtpslib_SOURCE_DIR}/opencl/bitonic_sort/src
)    

#IF(CLOUD_COLLISION)
#    SET(cloud_sources 
#    ${rtpslib_SOURCE_DIR}/system/Cloud.cpp
#
#    ${rtpslib_SOURCE_DIR}/system/sph/CloudVelocity
#    ${rtpslib_SOURCE_DIR}/system/sph/CloudEuler
#    ${rtpslib_SOURCE_DIR}/system/sph/Collision_cloud
#    ${rtpslib_SOURCE_DIR}/system/common/CloudPermute
#    )
#ENDIF(CLOUD_COLLISION)


#library source files (don't explicitly give file extension, inferred from source type)
set (rtpslib_SOURCES
    ${rtpslib_SOURCE_DIR}/RTPS
    ${rtpslib_SOURCE_DIR}/RTPSettings
    ${rtpslib_SOURCE_DIR}/util
    ${rtpslib_SOURCE_DIR}/structs
    ${rtpslib_SOURCE_DIR}/timege    #gordon's timer class
    ${rtpslib_SOURCE_DIR}/timer_eb  #evan's timer class
    ${rtpslib_SOURCE_DIR}/rtps_common

    ${rtpslib_SOURCE_DIR}/render/Render
    ${rtpslib_SOURCE_DIR}/render/SpriteRender
    ${rtpslib_SOURCE_DIR}/render/SSFRender
    ${rtpslib_SOURCE_DIR}/render/Sphere3DRender
    ${rtpslib_SOURCE_DIR}/render/util/stb_image.c
    ${rtpslib_SOURCE_DIR}/render/util/stb_image_write.h

    ${rtpslib_SOURCE_DIR}/domain/Domain
    ${rtpslib_SOURCE_DIR}/domain/IV

    ${rtpslib_SOURCE_DIR}/system/common/Hose
    ${rtpslib_SOURCE_DIR}/system/common/Hash
    ${rtpslib_SOURCE_DIR}/system/common/CellIndices
    ${rtpslib_SOURCE_DIR}/system/common/Permute
	
	# SPH
    ${rtpslib_SOURCE_DIR}/system/SPH.cpp
    ${rtpslib_SOURCE_DIR}/system/SPHSettings.cpp
    ${rtpslib_SOURCE_DIR}/system/sph/Euler
    ${rtpslib_SOURCE_DIR}/system/sph/LeapFrog
    ${rtpslib_SOURCE_DIR}/system/sph/Lifetime
    ${rtpslib_SOURCE_DIR}/system/sph/Density
    ${rtpslib_SOURCE_DIR}/system/sph/Force
    ${rtpslib_SOURCE_DIR}/system/sph/Collision_wall
    ${rtpslib_SOURCE_DIR}/system/sph/Collision_triangle
    
    #### these are CPU only
    ${rtpslib_SOURCE_DIR}/system/sph/Pressure
    ${rtpslib_SOURCE_DIR}/system/sph/Viscosity
    ${rtpslib_SOURCE_DIR}/system/sph/XSPH
    ####

    # Added by GE
    ${rtpslib_SOURCE_DIR}/system/boids

    )

SET(rtpslib_SOURCES ${rtpslib_SOURCES}
    ${rtpslib_SOURCE_DIR}/opencl/CLL
    ${rtpslib_SOURCE_DIR}/opencl/Kernel
    )
INCLUDE_DIRECTORIES(${rtpslib_INCLUDES})
ADD_LIBRARY(rtps STATIC ${rtpslib_SOURCES})

TARGET_LINK_LIBRARIES (rtps
   ${OPENGL_LIBRARIES}
   ${OPENCL_LIBRARIES}
   ${GLEW_LIBRARY}
)


#Doxygen
#find_package(Doxygen REQUIRED)
find_package(Doxygen)
set(DOXYGEN_INPUT   ${rtpslib_SOURCE_DIR}/doc/doxyfile)
set(DOXYGEN_OUTPUT  ${rtpslib_BINARY_DIR}/html/index.html)
file(MAKE_DIRECTORY ${rtpslib_BINARY_DIR}/html)

configure_file(
  ${rtpslib_SOURCE_DIR}/doc/doxyfile
  ${DOXYGEN_INPUT} @ONLY
)

add_custom_command(
  OUTPUT  ${DOXYGEN_OUTPUT}
  COMMAND ${DOXYGEN} ${DOXYGEN_INPUT}
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  DEPENDS ${DOXYGEN_INPUT}
)

add_custom_target(doc DEPENDS ${DOXYGEN_OUTPUT})

ADD_SUBDIRECTORY(system/common)
ADD_SUBDIRECTORY(system/sph)

MAKE_DIRECTORY(${rtpslib_BINARY_DIR}/shaders)
FILE(COPY ${rtpslib_SOURCE_DIR}/render/shaders/ DESTINATION ${rtpslib_BINARY_DIR}/shaders/)

install (TARGETS rtps DESTINATION ${rtpsuite_BINARY_DIR}/bin)
INSTALL(CODE "FILE(MAKE_DIRECTORY ${RTPS_INSTALL_DIR}/shaders)")
install (DIRECTORY ${rtpslib_BINARY_DIR}/shaders/ DESTINATION ${RTPS_INSTALL_DIR}/shaders/)
